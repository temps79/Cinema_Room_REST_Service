type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/entity/Seats.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;

    import java.util.*;
    import java.util.stream.Collectors;


    public class Seats {
        private final int totalRows;
        private final int totalColumns;
        private final List<Seat> availableSeats;

        private static Seats instance;

        @JsonProperty("total_rows")
        public int getTotalRows() {
            return totalRows;
        }

        @JsonProperty("total_columns")
        public int getTotalColumns() {
            return totalColumns;
        }

        @JsonProperty("available_seats")
        public List<Seat> getAvailableSeats() {
            return availableSeats.stream().filter(Seat::isActive).collect(Collectors.toList());
        }

        private Seats(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = new ArrayList<>();
            for (int i = 1; i <= totalRows; i++) {
                for (int j = 1; j <= totalColumns; j++) {
                    availableSeats.add(new Seat(i, j));
                }
            }
        }

        public static Seats getInstance(int totalRows, int totalColumns) {
            if(instance==null){
                instance=new Seats(totalRows,totalColumns);
            }
            return instance;
        }




    }
  learner_created: true
- name: src/cinema/rest/SeatsController.java
  visible: true
  text: |
    package cinema.rest;

    import cinema.entity.Seat;
    import cinema.entity.Seats;
    import cinema.exception.SeatNumberOfException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    @RestController
    public class SeatsController {
        private Seats seats;
        public SeatsController() {
            this.seats=Seats.getInstance(9,9);
        }

        @GetMapping(value="/seats")
        public ResponseEntity<Seats> list(){
            return ResponseEntity.status(HttpStatus.OK).body(seats);
        }
        @PostMapping(value="/purchase")
        public ResponseEntity<Seat> purchase(@RequestBody Seat seat){
            if(seat.getRow()>seats.getTotalRows() || seat.getColumn()>seats.getTotalColumns())
                throw new SeatNumberOfException("The number of a row or a column is out of bounds!");
            Seat blockSeat=seats.getAvailableSeats()
                    .stream().filter(seat1 -> seat1.getRow()==seat.getRow() && seat1.getColumn()==seat.getColumn())
                    .findFirst().orElse(null);
            if(blockSeat!=null){
                blockSeat.setActive(false);
            }else{
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,"The ticket has been already purchased!");
            }
            return ResponseEntity.ok(blockSeat);
        }
    }
  learner_created: true
- name: src/cinema/exception/SeatNumberOfException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST,reason = "The number of a row or a column is out of bounds!")
    public class SeatNumberOfException extends RuntimeException{
        public SeatNumberOfException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/entity/Seat.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public  class Seat {
        private final int row;
        private final int column;
        private final int price;

        private boolean isActive;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
            this.isActive=true;
        }

        public Seat() {
            row=0;
            column=0;
            price=0;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        @JsonIgnore
        public boolean isActive() {
            return isActive;
        }

        public void setActive(boolean active) {
            isActive = active;
        }

    }
  learner_created: true
- name: src/cinema/entity/Token.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    The JSON object shouldn&#39;t have the key &quot;ticket&quot;

    Full JSON:
    {
      &quot;ticket&quot;: {
        &quot;row&quot;: 1,
        &quot;column&quot;: 1,
        &quot;price&quot;: 10
      },
      &quot;token&quot;: &quot;bd0f22dc-14b5-4e00-b3b3-fc137f9bbe29&quot;
    }

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-29 18:30:18.709  INFO 15616 --- [    Test worker] cinema.Main                              : Starting Main using Java 17.0.4 on DESKTOP-4S9QJH2 with PID 15616 (started by temps in D:\WorkJavaProject\rest-spring\Cinema Room REST Service\Cinema Room REST Service\task)
    2022-07-29 18:30:18.712  INFO 15616 --- [    Test worker] cinema.Main                              : No active profile set, falling back to default profiles: default
    2022-07-29 18:30:20.002  INFO 15616 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
    2022-07-29 18:30:20.015  INFO 15616 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-29 18:30:20.016  INFO 15616 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-29 18:30:20.153  INFO 15616 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-29 18:30:20.153  INFO 15616 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1388 ms
    2022-07-29 18:30:20.771  INFO 15616 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-29 18:30:20.809  INFO 15616 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;
    2022-07-29 18:30:20.823  INFO 15616 --- [    Test worker] cinema.Main                              : Started Main in 2.501 seconds (JVM running for 3.27)
    2022-07-29 18:30:21.116  INFO 15616 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-29 18:30:21.116  INFO 15616 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-29 18:30:21.117  INFO 15616 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
  time: Fri, 29 Jul 2022 15:30:21 UTC
record: 2
